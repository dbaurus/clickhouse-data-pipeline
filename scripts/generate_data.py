#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:
- –í—Å—Ç–∞–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ PostgreSQL
- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Kafka
"""

import random
import time
import psycopg2
from datetime import datetime, timedelta
from kafka import KafkaProducer
import json
import logging
import sys

# ================================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ================================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# ================================
# üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
# ================================

# PostgreSQL
PG_CONFIG = {
    'host': 'srv-db-01',        # –∏–ª–∏ 'localhost', –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ —Ç–æ–º –∂–µ —Å–µ—Ä–≤–µ—Ä–µ
    'port': 5432,
    'dbname': 'retail',
    'user': 'user',
    'password': 'pass'
}

# Kafka
KAFKA_BROKER = 'srv-db-01:9092'  # Kafka –±—Ä–æ–∫–µ—Ä
KAFKA_TOPIC = 'user_actions'

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö
USER_COUNT = 100
PRODUCTS = [
    "Laptop", "Smartphone", "Tablet", "Headphones", "Mouse",
    "Keyboard", "Monitor", "Webcam", "Router", "Smartwatch"
]
ACTIONS = ["view", "add_to_cart", "purchase", "login", "logout", "search"]

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0 = –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
MAX_ORDERS = 1000
MAX_EVENTS = 5000


# ================================
# üõ†Ô∏è –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ================================

def create_tables_if_not_exists():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
    try:
        conn = psycopg2.connect(**PG_CONFIG)
        cur = conn.cursor()

        cur.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL,
                product VARCHAR(100) NOT NULL,
                amount NUMERIC(10, 2) NOT NULL,
                created_at TIMESTAMP NOT NULL DEFAULT NOW()
            );
        ''')

        conn.commit()
        cur.close()
        conn.close()
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –≤ PostgreSQL –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        sys.exit(1)


def insert_order(user_id, product, amount):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ PostgreSQL"""
    try:
        conn = psycopg2.connect(**PG_CONFIG)
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO orders (user_id, product, amount, created_at) VALUES (%s, %s, %s, NOW())",
            (user_id, product, amount)
        )
        conn.commit()
        cur.close()
        conn.close()
        logger.debug(f"üì¶ –í—Å—Ç–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑: user_id={user_id}, product={product}, amount={amount:.2f}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ PostgreSQL: {e}")


def send_kafka_event(producer, user_id, action, page=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Kafka"""
    event = {
        "user_id": user_id,
        "action": action,
        "timestamp": int(time.time()),
        "page": page or f"/product/{random.randint(1, 20)}",
        "client_ip": f"192.168.1.{random.randint(1, 254)}"
    }
    try:
        producer.send(KAFKA_TOPIC, value=event)
        logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Kafka: {event}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Kafka: {e}")


# ================================
# üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# ================================

def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    create_tables_if_not_exists()

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka
    try:
        producer = KafkaProducer(
            bootstrap_servers=[KAFKA_BROKER],
            value_serializer=lambda v: json.dumps(v).encode('utf-8'),
            acks='1',
            retries=3
        )
        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Kafka: {KAFKA_BROKER}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Kafka: {e}")
        sys.exit(1)

    # –°—á—ë—Ç—á–∏–∫–∏
    order_count = 0
    event_count = 0

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    try:
        while True:
            # === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞ (—Ä–µ–∂–µ) ===
            if MAX_ORDERS == 0 or order_count < MAX_ORDERS:
                if random.random() < 0.3:  # 30% —à–∞–Ω—Å –∑–∞–∫–∞–∑–∞
                    user_id = random.randint(1, USER_COUNT)
                    product = random.choice(PRODUCTS)
                    amount = round(random.uniform(50, 2000), 2)
                    insert_order(user_id, product, amount)
                    order_count += 1

            # === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è Kafka (—á–∞—â–µ) ===
            if MAX_EVENTS == 0 or event_count < MAX_EVENTS:
                user_id = random.randint(1, USER_COUNT)
                action = random.choice(ACTIONS)
                send_kafka_event(producer, user_id, action)
                event_count += 1

            # === –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã ===
            time.sleep(0.5)  # ~2 —Å–æ–±—ã—Ç–∏—è –≤ —Å–µ–∫—É–Ω–¥—É

            # === –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É ===
            if MAX_ORDERS > 0 and order_count >= MAX_ORDERS and \
               MAX_EVENTS > 0 and event_count >= MAX_EVENTS:
                logger.info("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
                break

    except KeyboardInterrupt:
        logger.info("üõë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logger.error(f"üõë –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        producer.close(timeout=5)
        logger.info("üëã –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")


# ================================
# –ó–∞–ø—É—Å–∫
# ================================

if __name__ == "__main__":
    main()
